#!/bin/bash

# 确保Conda已初始化
if ! command -v conda &> /dev/null
then
    echo "Conda not found. Please install Anaconda or Miniconda first."
    exit
fi

# 初始化conda环境
eval "$(conda shell.bash hook)" # 初始化conda shell命令

# 定义安装目录
INSTALL_DIR=$(pwd)

# 创建conda虚拟环境并激活
echo "Creating conda environment 'VM' with Python 3.9"
conda create -n VM python=3.9 -y
conda activate VM

# 安装PyQt和其他依赖项
echo "Installing dependencies..."
conda install pyqt -y
wget https://files.pythonhosted.org/packages/b6/06/291866f91c573cc637bedbdd008e6a8ca506b589e61de1540ca265cfe7bd/PyQt_Fluent_Widgets-1.6.5-py3-none-any.whl
pip install PyQt_Fluent_Widgets-1.6.5-py3-none-any.whl
pip install qdarkstyle
conda install numpy -c conda-forge -y
conda install vina -c conda-forge -y
conda install rdkit -c conda-forge -y
conda install chembl_webresource_client matplotlib -c conda-forge -y
conda install pyarrow -c conda-forge -y
conda install openpyxl -c conda-forge -y
conda install scipy -c conda-forge -y
conda install scikit-learn==1.3.2 -c conda-forge -y
conda install openbabel -c conda-forge -y
conda install pandas -c conda-forge -y
conda install prody -c conda-forge -y
conda install wandb -c conda-forge -y
conda install scikit-image -c conda-forge -y
conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia -y
pip install molgrid
pip install tqdm

# 创建Support_software目录并进入
echo "Creating Support_software directory..."
mkdir -p Support_software
cd Support_software

# MGLTools安装
echo "Installing MGLTools..."
mkdir -p mgltools
cd mgltools
wget https://ccsb.scripps.edu/mgltools/download/491/ -O mgltools_x86_64Linux2_1.5.7p1.tar.gz
tar -zxvf mgltools_x86_64Linux2_1.5.7p1.tar.gz
cd ..

# LeDock安装
echo "Installing LeDock..."
mkdir -p Ledock
cd Ledock
wget http://www.lephar.com/download/ledock_linux_x86
cd ..

# KarmaDock安装
echo "Installing KarmaDock..."
git clone https://github.com/schrojunzhang/KarmaDock
cd KarmaDock
mkdir -p Env
cd Env
wget https://zenodo.org/record/7788732/files/karmadock_env.tar.gz?download=1 -O karmadock_env.tar.gz
tar -zxvf karmadock_env.tar.gz
cd ../..

# AutoDock-GPU安装
echo "Installing AutoDock-GPU..."
git clone https://github.com/ccsb-scripps/AutoDock-GPU
cd AutoDock-GPU
export GPU_INCLUDE_PATH=/usr/local/cuda/include
export GPU_LIBRARY_PATH=/usr/local/cuda/lib64
make DEVICE=GPU NUMWI=64
cd ..

# Deeppocket安装
echo "Installing Deeppocket..."
git clone https://github.com/Discngine/fpocket.git
cd fpocket
make
sudo make install
cd ..
git clone https://github.com/devalab/DeepPocket.git
wget https://zenodo.org/records/13833813/files/first_model_fold1_best_test_auc_85001.pth.tar?download=1
wget https://zenodo.org/records/13833813/files/seg0_best_test_IOU_91.pth.tar?download=1
cd ..

# DeepCoy安装
echo "Installing DeepCoy..."
git clone https://github.com/fimrie/DeepCoy.git
cd DeepCoy
mkdir -p DeepCoy
wget https://zenodo.org/records/13831241/files/Deep_Coy_env.tar.gz?download=1
cd ..
# 下载DeepCoy预训练模型
echo "Downloading DeepCoy pretrained models..."
wget https://opig.stats.ox.ac.uk/data/downloads/DeepCoy_pretrained_models.tar.gz
tar -zxvf DeepCoy_pretrained_models.tar.gz
cd ..

# 将安装路径添加到.bashrc，并设置环境变量EVALUATIONMASTER
echo "Adding installation path to .bashrc and setting EVALUATIONMASTER..."

echo "export EVALUATIONMASTER=$INSTALL_DIR" >> ~/.bashrc

# 更新当前终端会话中的环境变量
export EVALUATIONMASTER=$INSTALL_DIR

# 使.bashrc立即生效
source ~/.bashrc

echo "Installation completed! EVALUATIONMASTER is set to $EVALUATIONMASTER"


cp $EVALUATIONMASTER/Substitude/KarmaDock/dataset/graph_obj.py  $EVALUATIONMASTER/Support_software/KarmaDock/dataset/graph_obj.py
